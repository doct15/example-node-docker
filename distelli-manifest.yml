bmcgehee/example-node-docker:
  # Distelli Manifest example  
  
  PreBuild:     
    # Add any build pre-requisites here 
    #- echo "---PreBuild---"
    
  Build:
    # Enter your build steps here!

    # use nvm (node version manager)
    - source ~/.nvm/nvm.sh
    # Install node v4.4.7
    - nvm install v4.4.7
    # install latest npm version globlaly 
    - npm install npm -g   

    #- echo "---Building---"   
    - npm install 
    #- echo "--Testing--"
    - npm test

    - echo "--Creating Docker Image--"
    - docker login -u "$DISTELLI_DOCKER_USERNAME" -p "$DISTELLI_DOCKER_PW" -e "$DISTELLI_DOCKER_EMAIL" $DISTELLI_DOCKER_ENDPOINT
    - docker build --quiet=false -t "$DISTELLI_DOCKER_REPO" "$DISTELLI_DOCKER_PATH"
    - docker tag "$DISTELLI_DOCKER_REPO" "$DISTELLI_DOCKER_REPO:$DISTELLI_BUILDNUM" 
    - echo "--Pushing Docker Image--"
    - 'docker push "$DISTELLI_DOCKER_REPO:$DISTELLI_BUILDNUM"'
   
  #PkgInclude:
  #  - '*'

  ###Below is deployment phases   
  
  Env:
    # Set any environment variables in this section.   
    # These are available during all phases of a deploy.
    - PORT: "3001"
    - FINDPORT_LOOP_CNT: "60"
    - FINDPORT_SLEEP: "2"

  PreInstall:  
    # Use this section to install any deployment pre-requisites.
    - echo "---PreInstall---"
    - sudo docker login -u "$DISTELLI_DOCKER_USERNAME" -p "$DISTELLI_DOCKER_PW" -e "$DISTELLI_DOCKER_EMAIL" $DISTELLI_DOCKER_ENDPOINT
    - echo "--Installing deploy dependencies--"
    - echo "-Updating apt-get-"
    - sudo apt-get -y clean
    - sudo apt-get -y update
    - echo "-Installing nodejs-"
    - sudo apt-get -y install nodejs 

  PostInstall:
    - echo "---PostInstall---"

  Exec:
    #- DOCKER_ENV_STRING=""
    #- TEMP_PREFIX_LENGTH="${#DOCKER_ENV_PREFIX}"

    #- for i in $(set | grep "$DOCKER_ENV_PREFIX"); do
    #-   if [ ${i:0:2} != "_=" ] && [ ${i:0:18} != "DOCKER_ENV_PREFIX=" ]; then
    #-     TEMP_ENV_VAR_LENGTH=${#i}
    #-     TEMP_ENV_VAR=${i:$TEMP_PREFIX_LENGTH:($TEMP_ENV_VAR_LENGTH - $TEMP_PREFIX_LENGTH)}
    #-     DOCKER_ENV_STRING+="-e $TEMP_ENV_VAR "
    #-   fi
    #- done
    #- export MYSQL_USERNAME
    - echo "docker run $DISTELLI_DOCKER_ENVS"
    - echo "MYSQL_USERNAME=$MYSQL_USERNAME"
    - sudo env
    
    - cid=$(uuidgen)
    - trap 'sudo docker stop $cid' SIGTERM
    - echo "sudo -E docker run --name=$cid $DISTELLI_DOCKER_ENVS --rm=true $DISTELLI_DOCKER_PORTS  $DISTELLI_DOCKER_REPO:$DISTELLI_BUILDNUM"
    - (sudo -E docker run --name=$cid $DISTELLI_DOCKER_ENVS --rm=true $DISTELLI_DOCKER_PORTS  "$DISTELLI_DOCKER_REPO:$DISTELLI_BUILDNUM") &
   
    - wait
    - "true"
    
  PostStart:
    - echo "---PostStart---"
    - time_amount=$(($FINDPORT_LOOP_CNT * $FINDPORT_SLEEP))
    - echo "--Checking over $time_amount seconds for up service on PORT $PORT--"
    - failure=1
    - for i in `seq 1 $FINDPORT_LOOP_CNT`; do
    -   echo "checking..."
    -   response=$(netstat -an | grep "LISTEN" | grep ":$PORT") || true
    -   'echo "RESPONSE: $response"'
    -   if [ "$response" != "" ]; then
    -     echo "Got $response."
    -     failure=0
    -     break
    -   fi
    -   sleep $FINDPORT_SLEEP
    - done
    - echo "================"
    - if [ "$failure" -gt 0 ]; then
    -   exit $failure
    - fi
    - echo "The service appears to be up."
    - publicip=$(curl -s ident.me) || true
    - 'echo "You can validate the install by pointing your browser at http://$publicip:$PORT"'

